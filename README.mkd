## F# support for Vim through LSP (vim-fsharp-languageclient)

This is a modified version of [fsharp/vim-fsharp](https://github.com/fsharp/vim-fsharp) which uses LSP-mode of [FsAutoComplete](https://github.com/fsharp/FsAutoComplete) as a backend, and is powered by [autozimu/LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim).

The original description is as follows:

> Syntax and indent files have been copied from [fsharp-vim](http://github.com/kongo2002/fsharp-vim) with kind permissions from [kongo2002](https://github.com/kongo2002).
> 
> > Requires vim 7.3 or higher compiled with python 2 or 3 support.
> 
> This was adapted from http://github.com/timrobinson/fsharp-vim. The current aim is to provide a good experience for fsx scripting. On opening an fs or fsi file any project file found in the same directory will be parsed. Multiple projects are supported.

Note that this plugin does not require python support. Also, [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim) requires neovim or vim 8.0+.

### Installing

vim-fsharp-languageclient requires .NET Core Runtime installed. Also it depends on [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim), so make sure it's installed beforehand.

I have only tested vim-plug and _install.sh_(_install.cmd_ should also work).

#### OSX and linux

##### Installing with pathogen

1. Clone vim-fsharp-languageclient into your bundle directory.

2. Run *make* inside the vim directory. This downloads the auto completion server.

##### Installing with [vim-plug][vim-plug]

~~~.vim
Plug 'cannorin/vim-fsharp-languageclient', {
      \ 'for': 'fsharp',
      \ 'do':  'make fsautocomplete',
      \}
~~~

##### Installing with [NeoBundle][NeoBundle]

By VimL way:
~~~.vim
NeoBundle 'cannorin/vim-fsharp-languageclient', {
           \ 'description': 'F# support for Vim',
           \ 'lazy': 1,
           \ 'autoload': {'filetypes': 'fsharp'},
           \ 'build': {
           \   'unix':  'make fsautocomplete',
           \ },
           \ 'build_commands': ['curl', 'make', 'mozroots', 'touch', 'unzip'],
           \}
~~~

By using TOML configuration:
~~~.toml
[[plugins]]
description = 'F# support for Vim'
repository = 'cannorin/vim-fsharp-languageclient'
lazy = 1
filetypes = 'fsharp'
build_commands = ['curl', 'make', 'mozroots', 'touch', 'unzip']
  [plugins.build]
  unix = 'make fsautocomplete'
~~~

#### Windows

1. Run _install.cmd_

### Setting up the language client

Once you installed, add the following to somewhere in your `.vimrc`:

```vim
let g:LanguageClient_serverCommands = {
  \ 'fsharp': g:fsharp#languageserver_command
  \ }
```

This will configure FSAC to be used from LanguageClient-neovim.

### Usage

Opening either `*.fs`, `*.fsi` or `*.fsx` files should trigger syntax highlighting and other depending runtime files as well.

### Commands

Refer to [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim) for features provided via Language Server Protocol.

To be added as requested for F#-specific features.

##### General
*  `:FSharpLoadWorkspaceAuto` Guess a workspace (`sln` or `fsproj`) and then load it. Equivalent to `FSharp.workspaceMode = sln` in Ionide. Automatically called when you open F# files.
* `:FSharpParseProject <files>+` Load specified projects (`fsproj` or `sln`).
* `:FSharpReloadWorkspace` Reload all the projects currently loaded. Automatically called when you edit and save `.fsproj` files.

### Settings

Refer to [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim) for features provided via Language Server Protocol.


To be added as requested for F#-specific features.

Show the type signature at the cursor position (default: 1).

~~~.vim
let g:fsharp#show_signature_on_cursor_move = 1 " 0 to disable.
~~~

Enable/disable automatic calling of `:FSharpLoadWorkspaceAuto`. (default: 1)

~~~.vim
let g:fsharp#automatic_workspace_init = 1 " 0 to disable.
~~~

Enable/disable automatic calling of `:FSharpReloadWorkspace`. (default: 1)

~~~.vim
let g:fsharp#automatic_reload_workspace = 1 " 0 to disable.
~~~

